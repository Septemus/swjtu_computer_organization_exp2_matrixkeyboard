
module EXP2(
	clk,
	KEY_R,
	KEY_C,
	out,
	ins_num,
	codeout
);
	input clk,
	input [3:0] KEY_R,
	output reg[3:0] KEY_C = 4'b0111,
	output reg[3:0] out= 4'b0000,
	output reg[4:0] ins_num=5'b10000,
	output [7:0] codeout
	reg [31:0]timer = 32'b1;
	reg [1:0] state_machine = 2'b0;
	
//根据按钮的列扫描信号和行输入信号判断按钮是否被按下
always  @(posedge clk)
begin

			state_machine = state_machine + 1'b1;
			case (state_machine)
				2'b00:	KEY_C <= 4'b1110;
				2'b01:	KEY_C <= 4'b1101;
				2'b10:	KEY_C <= 4'b1011;
				2'b11:	KEY_C <= 4'b0111;         
       			endcase
      //如果无按钮按下，定义ins_num=16为无效状态
      if (KEY_R == 4'b1111)
		begin 
          ins_num = 5'd16;       
		end   //无按键输入，输出16
             
      else begin 
           case ({KEY_C, KEY_R})
             
             8'b1011_1110: ins_num = 5'd0;
             8'b0111_0111: ins_num = 5'd1;
             8'b1011_0111: ins_num = 5'd2;
             8'b1101_0111: ins_num = 5'd3;
             
             8'b0111_1011: ins_num = 5'd4;
             8'b1011_1011: ins_num = 5'd5;
             8'b1101_1011: ins_num = 5'd6;
             8'b0111_1101: ins_num = 5'd7;  
             
             8'b1011_1101: ins_num = 5'd8;
             8'b1101_1101: ins_num = 5'd9;
             8'b1110_0111: ins_num = 5'd10;
             8'b1110_1011: ins_num = 5'd11;  
             
             8'b1110_1101: ins_num = 5'd12;
             8'b1110_1110: ins_num = 5'd13;
             8'b0111_1110: ins_num = 5'd14;
             8'b1101_1110: ins_num = 5'd15;  
           endcase
			  end
		begin
			if(ins_num == 5'b1_0000)
				begin
					if(timer == 32'b0)begin
						timer = 32'd100001;end
					timer = timer + 1'b1;
				end
			else if(timer > 32'd100000)
				begin
					timer = 32'b1;
				
					//移位
					begin
					out[3:0] = ins_num[3:0];
					end
				end
			end
		
end
segment_displays sg(ins_num[3:0],codeout);
endmodule   